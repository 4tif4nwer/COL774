# -*- coding: utf-8 -*-
"""maza-aa-gaya-RNN-TF.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1D-M9I5-FqTPQqoZpHFJpiATZApUpCoEu
"""

# This Python 3 environment comes with many helpful analytics libraries installed
# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python
# For example, here's several helpful packages to load

import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)
import torch
import sys
# Input data files are available in the read-only "../input/" directory
# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory


# Can You see this update?


# import os
# for dirname, _, filenames in os.walk('data'):
#     for filename in filenames:
#         os.path.join(dirname, filename)

# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using "Save & Run All" 
# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session

from __future__ import print_function, division
import os
import torch
import pandas as pd
from skimage import io, transform
import numpy as np
from sklearn.preprocessing import OneHotEncoder
import matplotlib.pyplot as plt
from torch.utils.data import Dataset, DataLoader
from torchvision import transforms, utils
from sklearn.model_selection import train_test_split
# Ignore warnings
import warnings
from tqdm import tqdm
warnings.filterwarnings("ignore")

from __future__ import print_function, division
import torch
import torch.nn as nn
import torch.optim as optim
from torch.optim import lr_scheduler
import torch.nn.functional as F
import torch.backends.cudnn as cudnn
import numpy as np
import torchvision
from torchvision import datasets, models, transforms
import matplotlib.pyplot as plt
import time
import os
import copy
import nltk
import re

def clean_text(text):
    #2. remove unkonwn characrters
    emoji_pattern = re.compile("["
                           u"\U0001F600-\U0001F64F"  # emoticons
                           u"\U0001F300-\U0001F5FF"  # symbols & pictographs
                           u"\U0001F680-\U0001F6FF"  # transport & map symbols
                           u"\U0001F1E0-\U0001F1FF"  # flags (iOS)
                           u"\U00002702-\U000027B0"
                           u"\U000024C2-\U0001F251"
                           "]+", flags=re.UNICODE)
    text = emoji_pattern.sub(r'', text)
   
    #1. remove http links
    url = re.compile(r'https?://\S+|www\.\S+')
    text = url.sub(r'',text)
    
    #5. lowercase
    text = text.lower()
    
    return text

#print(torch.cuda.device_count())
#print(torch.cuda.get_device_name(0))
device = torch.device("cuda:0" if torch.cuda.is_available() else "cpu")
print(device)
data = sys.argv[1]
#print(os.listdir("data"))
ttrain_x = pd.read_csv("/train_x.csv")
ttrain_y = pd.read_csv(data+"/train_y.csv")
test_x = pd.read_csv(data+"/non_comp_test_x.csv")
test_y = pd.read_csv(data+"/non_comp_test_y.csv")
train_x= pd.concat([ttrain_x,test_x])
train_y= pd.concat([ttrain_y,test_y])

from transformers import AutoModelForSequenceClassification, TFAutoModelForSequenceClassification,TFBertForSequenceClassification
from transformers import AutoTokenizer
import tensorflow as tf
import numpy as np
from sklearn.model_selection import train_test_split
from transformers import BertTokenizerFast

tokenizer = BertTokenizerFast.from_pretrained('bert-base-uncased')

train_x['Title'] = train_x['Title'].apply(lambda x: clean_text(x))
test_x['Title'] = test_x['Title'].apply(lambda x: clean_text(x))

def get_train_ds(data,data_y, batch_size=32):
#   data = data.sample(n=300000) # optionally sample a subset of the data
  X_train, y_train = list(data.Title), list(data_y.Genre)
  train_encodings = tokenizer(X_train, truncation=True, padding=True)
  train_ds = tf.data.Dataset.from_tensor_slices((
      dict(train_encodings),
      y_train
  ))

  train_ds = train_ds.batch(batch_size)
  return train_ds

f=np.array(train_x['Title'])
f.shape

train_ds = tf.data.Dataset.from_tensor_slices((train_x['Title'], train_y['Genre'])).batch(2)
def py_func(x):
  x = x.numpy()
  x = [i.decode("utf-8") for i in x]
  d = tokenizer(x, truncation=True, padding=True)
  return list(d.values())

def ds_map_fn(x,y):
  flattened_output = tf.py_function(py_func, [x], [tf.int32, tf.int32])
  return {"input_ids": flattened_output[0], "attention_mask": flattened_output[1]},y

train_ds = train_ds.map(ds_map_fn)
for x,y in train_ds.take(2):
  print(x)

## But I still get an error
# OperatorNotAllowedInGraphError: iterating over `tf.Tensor`
# is not allowed: AutoGraph did convert this function.
# This might indicate you are trying to use an unsupported feature.

model = TFBertForSequenceClassification.from_pretrained("bert-base-uncased", num_labels=30 )

lr_schedule = tf.keras.optimizers.schedules.ExponentialDecay(
    initial_learning_rate=1e-5,
    decay_steps=10000,
    decay_rate=0.9)
optimizer = tf.keras.optimizers.Adam(learning_rate=lr_schedule)
model.compile(optimizer=optimizer,
              loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),
              metrics=tf.metrics.SparseCategoricalAccuracy()
              ) # can also use any keras loss fn

def train_on_slice(train_ds):
  model.fit(train_ds, epochs=2)
  tokenizer.save_pretrained(f"{'/content/output_model_path'}")
  model.save_pretrained(f"{'/content/output_model_path'}")

train_ds = get_train_ds(train_x,train_y)
train_on_slice(train_ds)


def extract_predictions(text, batch_size=64):
  a_preds = []
  a_scores = []
  chunks = range(0,len(text), batch_size)
  for i,x, in tqdm(enumerate(chunks), total=len(chunks)):
    start, end = x, x+batch_size
    stext = text[start: end]
    data_encodings = tokenizer(stext, truncation=True, padding=True)
    ds = tf.data.Dataset.from_tensor_slices(dict(data_encodings)).batch(batch_size)

    preds = model.predict(ds)["logits"]
    classes = np.argmax(preds, axis=1).tolist()
    probs = tf.nn.softmax(preds) # get probabilities from logits
    scores = np.amax(probs, axis=1).tolist()

    a_preds.extend(classes)
    a_scores.extend(scores)
  # return predictions and scores
  return a_preds
ftest_x = pd.read_csv("data/comp_test_x.csv")
text=list(ftest_x['Title'])
result = extract_predictions(text, batch_size=256)

x_np=np.array(result)
x_df = pd.DataFrame(x_np)
x_df.index.name='Id'
x_df.to_csv('comp_test_y.csv',header=["Genre"])

